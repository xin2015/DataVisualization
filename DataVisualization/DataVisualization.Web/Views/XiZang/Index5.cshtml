@{
    Layout = null;
}

<!doctype html>
<html lang="zh-cn">
<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
    <link rel="stylesheet" href="https://openlayers.org/en/v4.6.5/css/ol.css" type="text/css">
    <title>GIS GIS</title>
    <style type="text/css">
        body {
            font-size: 14px;
        }

        .map {
            position: absolute;
            left: 0;
            top: 0;
            right: 0;
            bottom: 0;
        }

        .visualMap {
            right: .5em;
            bottom: .5em;
            position: absolute;
        }
    </style>
</head>
<body>
    <div id="mapDiv" class="map"></div>
    <script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx" crossorigin="anonymous"></script>
    <script src="https://openlayers.org/en/v4.6.5/build/ol.js"></script>
    <script src="https://d3js.org/d3-contour.v2.js"></script>
    <script type="text/javascript">
        var isGradient = true;
        var polylineStatus = true;
        var mapCenter = ol.proj.fromLonLat([88.695901, 32.041647]);
        var mapZoom = 5;
        var mapProjection = ol.proj.get('EPSG:3857'); // 投影坐标系
        var mapProjectionExtent = mapProjection.getExtent(); // 投影坐标系范围
        var mapProjectionSize = ol.extent.getWidth(mapProjectionExtent) / 256;
        var mapMinZoom = 1, mapMaxZoom = 18;
        var mapResolutions = [];
        for (var i = 0; i <= mapMaxZoom; i++) {
            mapResolutions[i] = mapProjectionSize / Math.pow(2, i);
        }
        var wrapX = true;
        var colors = [{
            r: 128,
            g: 214,
            b: 0
        }, {
            r: 0,
            g: 228,
            b: 0
        }, {
            r: 255,
            g: 255,
            b: 0
        }, {
            r: 255,
            g: 126,
            b: 0
        }, {
            r: 255,
            g: 0,
            b: 0
        }, {
            r: 153,
            g: 0,
            b: 76
        }, {
            r: 126,
            g: 0,
            b: 35
        }, {
            r: 108,
            g: 0,
            b: 8
        }];
        var levels = [-10, -5, -2, 0, 2, 5, 10];
        var gradients;
        var getColorFunc = getLevelColor;
        function getLevelColor(lt) {
            var r, g, b;
            for (var k = 1; k < levels.length; k++) {
                if (lt <= levels[k]) {
                    r = colors[k].r;
                    g = colors[k].g;
                    b = colors[k].b;
                    break;
                }
            }
            return 'rgb(' + r + ',' + g + ',' + b + ')';
        }
        function getGradientColor(lt) {
            var r, g, b;
            for (var k = 1, l = 0; k < gradients.length; l = k++) {
                if (lt <= gradients[k]) {
                    var p = (lt - gradients[l]) / (gradients[k] - gradients[l]);
                    r = colors[l].r + Math.round(p * (colors[k].r - colors[l].r));
                    g = colors[l].g + Math.round(p * (colors[k].g - colors[l].g));
                    b = colors[l].b + Math.round(p * (colors[k].b - colors[l].b));
                    break;
                }
            }
            return 'rgb(' + r + ',' + g + ',' + b + ')';
        }
        function setGradients() {
            gradients = [];
            gradients.push(levels[0]);
            for (var i = 1; i < levels.length; i++) {
                gradients.push((levels[i - 1] + levels[i]) / 2);
            }
            gradients.push(levels[levels.length - 1]);
            getColorFunc = getGradientColor;
        }
        var unit = '℃';
        function getColorString(color) {
            return 'rgb(' + color.r + ',' + color.g + ',' + color.b + ')';
        }
        var temperatureData, lonData, latData, contours, geoJsonObject;
        var vecSource = new ol.source.TileImage({
            projection: mapProjection,
            tileGrid: new ol.tilegrid.TileGrid({
                extent: mapProjectionExtent,
                minZoom: mapMinZoom,
                origin: ol.extent.getTopLeft(mapProjectionExtent),
                resolutions: mapResolutions,
                tileSize: [256, 256]
            }),
            url: 'http://t{0-7}.tianditu.gov.cn/vec_w/wmts?tk=fdcab2d88e293c189daf038cd01592e6&layer=vec&style=default&tilematrixset=w&Service=WMTS&Request=GetTile&Version=1.0.0&Format=tiles&TileMatrix={z}&TileCol={x}&TileRow={y}',
            wrapX: wrapX
        });
        var vecLayer = new ol.layer.Tile({
            source: vecSource
        });
        //var cvaSource = new ol.source.TileImage({
        //    projection: mapProjection,
        //    tileGrid: new ol.tilegrid.TileGrid({
        //        extent: mapProjectionExtent,
        //        minZoom: mapMinZoom,
        //        origin: ol.extent.getTopLeft(mapProjectionExtent),
        //        resolutions: mapResolutions,
        //        tileSize: [256, 256]
        //    }),
        //    url: 'http://t{0-7}.tianditu.gov.cn/cva_w/wmts?tk=fdcab2d88e293c189daf038cd01592e6&layer=cva&style=default&tilematrixset=w&Service=WMTS&Request=GetTile&Version=1.0.0&Format=tiles&TileMatrix={z}&TileCol={x}&TileRow={y}',
        //    wrapX: wrapX
        //});
        //var cvaLayer = new ol.layer.Tile({
        //    source: cvaSource
        //});
        var polylineStyle = new ol.style.Style({
            stroke: new ol.style.Stroke({
                color: '#000',
                width: 2
            }),
            text: new ol.style.Text({
                font: '14px arial,sans-serif',
                fill: new ol.style.Fill({
                    color: '#000'
                }),
                stroke: new ol.style.Stroke({
                    color: '#000',
                    width: 1
                })
            })
        });
        var polylineSource = new ol.source.Vector({
            url: function () {
                return '/Scripts/data/100000_geo.json';
            },
            format: new ol.format.GeoJSON()
        });
        var polylineLayer = new ol.layer.Vector({
            source: polylineSource,
            style: function (feature) {
                polylineStyle.getText().setText(feature.get('name'));
                return polylineStyle;
            }
        });
        var map = new ol.Map({
            layers: [vecLayer, polylineLayer],
            target: 'mapDiv',
            controls: ol.control.defaults({
                attribution: false,
                rotate: true,
                zoomOptions: {
                    zoomInTipLabel: '放大',
                    zoomOutTipLabel: '缩小'
                }
            }),
            view: new ol.View({
                center: mapCenter,
                zoom: mapZoom,
                minZoom: mapMinZoom,
                maxZoom: mapMaxZoom
            })
        });
        // 双线性插值
        function bilinearInterpolate(i, j, data, colCount, rowCount) {
            var i0 = Math.floor(i), j0 = Math.floor(j);
            if (i == i0 && j == j0) {
                return data[i0 * colCount + j0];
            }
            var i1 = i == i0 ? i + 1 : Math.ceil(i);
            var j1 = j == j0 ? j + 1 : Math.ceil(j);
            if (i0 == -1) {
                i0++;
                i1++;
            }
            if (i1 == rowCount) {
                i0--;
                i1--;
            }
            if (j0 == -1) {
                j0++;
                j1++;
            }
            if (j1 == colCount) {
                j0--;
                j1--;
            }
            var di0 = i - i0, di1 = i1 - i;
            var dj0 = j - j0, dj1 = j1 - j;
            return data[i0 * colCount + j0] * di1 * dj1 + data[i0 * colCount + j1] * di1 * dj0 + data[i1 * colCount + j0] * di0 * dj1 + data[i1 * colCount + j1] * di0 * dj0;
        }

        function render() {
            $.getJSON("/Scripts/data/20210720/20210720000000_temperature_500.json").done(function (json) {
                temperatureData = json;
                var contourLevels = levels;
                if (isGradient) {
                    for (; contourLevels.length < 200;) {
                        var temp = [];
                        for (var i = 1; i < contourLevels.length; i++) {
                            temp.push(contourLevels[i - 1]);
                            temp.push((contourLevels[i - 1] + contourLevels[i]) / 2);
                        }
                        temp.push(contourLevels[contourLevels.length - 1]);
                        contourLevels = temp;
                    }
                }
                contours = d3.contours()
                    .size([temperatureData.colCount, temperatureData.rowCount])
                    .smooth(true)
                    .thresholds(contourLevels)(temperatureData.data);
                var features = [];
                for (var i = 0; i < contours.length; i++) {
                    var contour = contours[i];
                    var coordinates = [];
                    for (var j = 0; j < contour.coordinates.length; j++) {
                        var polygonS = contour.coordinates[j];
                        var polygon = [];
                        for (var k = 0; k < polygonS.length; k++) {
                            var pointsS = polygonS[k];
                            var points = [];
                            for (var l = 0; l < pointsS.length; l++) {
                                var pointS = pointsS[l];
                                pointS = [pointS[0] - 0.5, pointS[1] - 0.5];
                                var point = [bilinearInterpolate(pointS[1], pointS[0], lonData.data, lonData.colCount, lonData.rowCount), bilinearInterpolate(pointS[1], pointS[0], latData.data, latData.colCount, latData.rowCount)];
                                points.push(point);
                            }
                            polygon.push(points);
                        }
                        coordinates.push(polygon);
                    }
                    var feature = {
                        'type': 'Feature',
                        'properties': {
                            'value': contour.value
                        },
                        'geometry': {
                            'type': 'MultiPolygon',
                            'coordinates': coordinates
                        }
                    };
                    features.push(feature);
                }
                geoJsonObject = {
                    'type': 'FeatureCollection',
                    'features': features
                };
                console.log(geoJsonObject);
                //renderSource.refresh();
            }).fail(function (jqxhr, textStatus, error) {
                temperatureData = null;
                contours = null;
                geoJsonObject = {
                    'type': 'FeatureCollection',
                    'features': []
                };
                //renderSource.refresh();
                var err = textStatus + ", " + error;
                console.log("Request Failed: " + err);
            });
        }

        function renderCoordinate() {
            $.getJSON("/Scripts/data/20210720/20210720000000_lon.json").done(function (json) {
                lonData = json;
                //renderSource.refresh();
            }).fail(function (jqxhr, textStatus, error) {
                lonData = null;
                var err = textStatus + ", " + error;
                console.log("Request Failed: " + err);
            });
            $.getJSON("/Scripts/data/20210720/20210720000000_lat.json").done(function (json) {
                latData = json;
                //renderSource.refresh();
            }).fail(function (jqxhr, textStatus, error) {
                latData = null;
                var err = textStatus + ", " + error;
                console.log("Request Failed: " + err);
            });
        }

        renderCoordinate();
        $(document).ready(function () {
            render();
            setGradients();
        });
    </script>
</body>
</html>