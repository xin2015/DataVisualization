@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta name="keywords" content="OpenLayers" />
    <title>BMapChinaHourData</title>
    <link rel="stylesheet" href="https://openlayers.org/en/v4.6.5/css/ol.css" type="text/css">
    <script src="https://openlayers.org/en/v4.6.5/build/ol.js"></script>
    <style type="text/css">
        body, html {
            width: 100%;
            height: 100%;
            margin: 0;
            font-family: "Microsoft YaHei"
        }

        .mapDiv {
            width: 100%;
            height: 100%;
            float: left;
        }
    </style>
</head>
<body>
    <div class="mapDiv" id="mapDiv"></div>
    <script src="~/Scripts/jquery-3.4.1.min.js"></script>
    <script src="~/Scripts/kriging/kriging.contour.js"></script>
    <script>
        let params = {
            mapCenter: [104.5, 36],
            maxValue: 500,
            krigingModel: 'exponential',//'exponential','gaussian','spherical'
            krigingSigma2: 0,
            krigingAlpha: 100,
            canvasAlpha: 0.8,
            //colors: ["#006837", "#1a9850", "#66bd63", "#a6d96a", "#d9ef8b", "#ffffbf", "#fee08b",
            //    "#fdae61", "#f46d43", "#d73027", "#a50026"]
            colors: ["#00E400", "#FFFF00", "#FF7E00", "#FF0000", "#99004C", "#7E0023"]
        };
        //osm底图
        let baseLayer = new ol.layer.Tile({
            source: new ol.source.OSM()
        });

        //生成测试数据
        let dataset = {
            "type": "FeatureCollection",
            "features": []
        };
        //for (let i = 0; i < 1000; i++) {
        //    let feature = {
        //        "type": "Feature",
        //        "properties": {
        //            "level": Math.random() * 100
        //        },
        //        "geometry": {
        //            "type": "Point",
        //            "coordinates": [params.mapCenter[0] + Math.random() * 0.1 - .05, params.mapCenter[1] + Math.random() * 0.1 - .05]
        //        }
        //    };
        //    dataset.features.push(feature);
        //}
        var sw = [73, 18], ne = [136, 54];
        var extent = [sw[0], sw[1], ne[0], ne[1]];
        var format = new ol.format.GeoJSON();
        $.ajax({
            url: "/Home/GetStationHourData",
            success: function (a, b, c) {
                var lnga = 136, lngi = 73, lata = 54, lati = 18;
                for (var i = lngi; i < lnga; i += 1) {
                    for (var j = lati; j < lata; j += 1) {
                        var lngi = i + 1;
                        var latj = j + 1;
                        var count = 0, lngm = 0, latm = 0, valuem = 0;
                        for (var k in a) {
                            var item = a[k];
                            if (item.AQI != "—") {
                                var longitude = item.Longitude - 0;
                                var latitude = item.Latitude - 0;
                                var value = item.AQI - 0;
                                if (longitude >= i && longitude < lngi && latitude >= j && latitude < latj) {
                                    count++;
                                    lngm += longitude;
                                    latm += latitude;
                                    valuem += value;
                                }
                            }
                        }
                        if (count > 0) {
                            let feature = {
                                "type": "Feature",
                                "properties": {
                                    "level": valuem / count
                                },
                                "geometry": {
                                    "type": "Point",
                                    "coordinates": [lngm / count, latm / count]
                                }
                            };
                            dataset.features.push(feature);
                        }
                    }
                }

                //for (var i = 0; i < a.length; i++) {
                //    var item = a[i];
                //    if (item.AQI != "—") {
                //        var longitude = item.Longitude - 0;
                //        var latitude = item.Latitude - 0;
                //        var value = item.AQI - 0;
                //        let feature = {
                //            "type": "Feature",
                //            "properties": {
                //                "level": value
                //            },
                //            "geometry": {
                //                "type": "Point",
                //                "coordinates": [longitude, latitude]
                //            }
                //        };
                //        dataset.features.push(feature);
                //    }
                //}

                showKrigingImage();
            }
        });
        let map = new ol.Map({
            target: 'mapDiv',
            layers: [baseLayer],
            view: new ol.View({
                center: ol.proj.fromLonLat(params.mapCenter),
                //center: params.mapCenter,
                //projection: 'EPSG:4326',
                zoom: 5
            })
        });

        //克里金栅格等值面
        let krigingCanvasLayer = new ol.layer.Image({
            zIndex: 2
        });
        //向map添加图层
        map.addLayer(krigingCanvasLayer);

        function showKrigingImage() {
            let imageSource = new ol.source.ImageCanvas({
                canvasFunction: (extent, resolution, pixelRatio, size, projection) => {
                    let canvas = document.createElement('canvas');
                    canvas.width = size[0];
                    canvas.height = size[1];
                    canvas.style.display = 'block';
                    //设置canvas透明度
                    canvas.getContext('2d').globalAlpha = params.canvasAlpha;

                    //使用分层设色渲染
                    kriging.drawCanvasContour(dataset, 'level', {
                        model: 'exponential',
                        sigma2: 0,
                        alpha: 100
                    }, canvas, [extent[0], extent[2]], [extent[1], extent[3]], params.colors);

                    return canvas;
                },
                projection: 'EPSG:4326'
            });

            krigingCanvasLayer.setSource(imageSource);
        }
    </script>
</body>
</html>
